{"version":3,"sources":["components/Note.js","services/notes.js","components/Notification.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","baseUrl","notesService","getAll","axios","get","then","response","data","create","newObject","post","update","id","put","ErrorNotification","message","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","map","find","n","changedNote","returnedNote","catch","err","setTimeout","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","length","concat","value","onChange","console","log","target","type","ReactDOM","render","document","getElementById"],"mappings":"4KAaeA,EAXF,SAAC,GAA8B,IAA7BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,iBACbC,EAAQF,EAAKG,UAAY,mBAAqB,iBAEpD,OACE,qBAAIC,UAAU,OAAd,UACGJ,EAAKK,QACN,wBAAQC,QAASL,EAAjB,SAAoCC,Q,gBCNpCK,EAAU,aAkBDC,EADM,CAAEC,OAfR,WAEX,OADgBC,IAAMC,IAAIJ,GACXK,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAadC,OAVhB,SAACC,GAEZ,OADgBN,IAAMO,KAAKV,EAASS,GACrBJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQNI,OALxB,SAACC,EAAIH,GAEhB,OADgBN,IAAMU,IAAN,UAAab,EAAb,YAAwBY,GAAMH,GAC/BJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UChBvCO,EAAoB,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACxB,OAAe,OAAZA,EACQ,KAIP,qBAAKlB,UAAU,QAAf,SACKkB,KCFPC,EAAS,WAMb,OACE,sBAAKC,MANa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,IAGV,UACE,uBACA,2GA+FSC,EA1FH,WACV,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,uBAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAAwCN,mBAAS,MAAjD,mBAAOO,EAAP,KAAqBC,EAArB,KACA,EAA4CR,mBAAS,MAArD,6BAEAS,qBAAU,WACRC,EACG9B,SACAG,MAAK,SAAA4B,GACJT,EAASS,QAEZ,IAEH,IAsBMC,EAAcP,EAAUJ,EAAQA,EAAMY,QAAO,SAAA1C,GAAI,OAAIA,EAAKG,aAuBhE,OACE,gCACE,gDACA,cAAC,EAAD,CAAmBmB,QAASc,IAC5B,6BACGK,EAAYE,KAAI,SAAA3C,GAAI,OACnB,cAAC,EAAD,CAEEA,KAAMA,EACNC,iBAAkB,kBA9BH,SAACkB,GACxB,IAAMnB,EAAO8B,EAAMc,MAAK,SAAAC,GAAC,OAAIA,EAAE1B,KAAOA,KAChC2B,EAAW,2BAAO9C,GAAP,IAAaG,WAAYH,EAAKG,YAE/CoC,EACCrB,OAAOC,EAAI2B,GACXlC,MAAK,SAAAmC,GACJhB,EAASD,EAAMa,KAAI,SAAA3C,GAAI,OAAIA,EAAKmB,KAAOA,EAAK4B,EAAe/C,SAE5DgD,OAAM,SAAAC,GACLZ,EAAgB,QAAD,OACLrC,EAAKK,QADA,uCAGf6C,YAAW,WACTb,EAAgB,QACf,KAEHN,EAASD,EAAMY,QAAO,SAAAG,GAAC,OAAIA,EAAE1B,KAAOA,SAaNlB,CAAiBD,EAAKmB,MAFzCnB,EAAKmB,SAOhB,yBAAQb,QAAS,kBAAM6B,GAAYD,IAAnC,kBACQA,EAAU,cAAgB,QADlC,eAIA,uBAAMiB,SA/DM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjBjD,QAAS2B,EACTuB,MAAM,IAAIC,MAAOC,cACjBtD,UAAWuD,KAAKC,SAAW,GAC3BxC,GAAIW,EAAM8B,OAAS,GAGnBrB,EACCxB,OAAOuC,GACP1C,MAAK,SAAAmC,GACJhB,EAASD,EAAM+B,OAAOd,IACtBd,EAAW,QAkDb,UACE,uBACE6B,MAAO9B,EACP+B,SAjDiB,SAACX,GACxBY,QAAQC,IAAIb,EAAMc,OAAOJ,OACzB7B,EAAWmB,EAAMc,OAAOJ,UAiDpB,wBAAQK,KAAK,SAAb,qBAEF,cAAC,EAAD,Q,MCnGNC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.e674f332.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nconst Note = ({note, toggleImportance}) => {\r\n  const label = note.important ? \"Mark Unimportant\" : \"Mark Important\"\r\n\r\n  return(\r\n    <li className='note'>\r\n      {note.content}\r\n      <button onClick={toggleImportance}>{label}</button>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default Note","import axios from \"axios\";\r\n\r\nconst baseUrl = '/api/notes'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst create = (newObject) => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst notesService = { getAll, create, update }\r\nexport default notesService","const ErrorNotification = ({message}) => {\r\n    if(message === null) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className='error'>\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst SuccessNotification = ({message}) => {\r\n    if(message === null) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className='success'>\r\n            {message}\r\n        </div>\r\n    )\r\n} \r\n\r\nexport {\r\n    SuccessNotification,\r\n    ErrorNotification\r\n}","import {React, useState, useEffect} from \"react\";\nimport Note from \"./components/Note\";\nimport noteService from \"./services/notes\";\nimport {SuccessNotification, ErrorNotification} from './components/Notification'\n\nconst Footer = () => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16\n  }\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>Note app, Department of Computer Science, University of Helsinki 2021</em>\n    </div>\n  )\n}\n\nconst App = () => {  \n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState(\"Write a new note...\")\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState(null)\n  const [successMessage, setSuccessMessage] = useState(null)\n\n  useEffect(() => {\n    noteService\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n  }, [])\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote, \n      date: new Date().toISOString(),\n      important: Math.random() < 0.5, \n      id: notes.length + 1\n    }\n\n      noteService\n      .create(noteObject)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n        setNewNote(\"\")\n      })\n  }\n\n  const handleNoteChange = (event) => {\n    console.log(event.target.value)\n    setNewNote(event.target.value)\n  }\n\n  const notesToShow = showAll ? notes : notes.filter(note => note.important)\n\n  const toggleImportance = (id) => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = {...note, important: !note.important}\n\n    noteService\n    .update(id, changedNote)\n    .then(returnedNote => {\n      setNotes(notes.map(note => note.id === id ? returnedNote : note))\n    })\n    .catch(err => {\n      setErrorMessage(\n        `Note'${note.content}' was already removed from server!`\n      )\n      setTimeout(() => {\n        setErrorMessage(null)\n      }, 5000);\n\n      setNotes(notes.filter(n => n.id !== id))\n    })\n  } \n\n  return (\n    <div>\n      <h1>Part 2 - Notes</h1>\n      <ErrorNotification message={errorMessage}/>\n      <ul>\n        {notesToShow.map(note => \n          <Note \n            key={note.id} \n            note={note} \n            toggleImportance={() => toggleImportance(note.id)}\n          />)\n        }\n      </ul>\n      \n      <button onClick={() => setShowAll(!showAll)}>\n        Show {showAll ? \" important \" : \" all \"} messages\n      </button>\n\n      <form onSubmit={addNote}>\n        <input \n          value={newNote}\n          onChange={handleNoteChange}\n        />\n        <button type=\"submit\">Save</button>\n      </form>\n      <Footer/>\n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css'\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n)\n\n\n\n"],"sourceRoot":""}